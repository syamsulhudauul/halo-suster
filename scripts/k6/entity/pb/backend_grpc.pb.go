// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: backend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NIPService_GetItNip_FullMethodName    = "/pb.NIPService/GetItNip"
	NIPService_GetNurseNip_FullMethodName = "/pb.NIPService/GetNurseNip"
)

// NIPServiceClient is the client API for NIPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NIPServiceClient interface {
	GetItNip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNipResponse, error)
	GetNurseNip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNipResponse, error)
}

type nIPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNIPServiceClient(cc grpc.ClientConnInterface) NIPServiceClient {
	return &nIPServiceClient{cc}
}

func (c *nIPServiceClient) GetItNip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNipResponse, error) {
	out := new(GetNipResponse)
	err := c.cc.Invoke(ctx, NIPService_GetItNip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nIPServiceClient) GetNurseNip(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNipResponse, error) {
	out := new(GetNipResponse)
	err := c.cc.Invoke(ctx, NIPService_GetNurseNip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NIPServiceServer is the server API for NIPService service.
// All implementations must embed UnimplementedNIPServiceServer
// for forward compatibility
type NIPServiceServer interface {
	GetItNip(context.Context, *emptypb.Empty) (*GetNipResponse, error)
	GetNurseNip(context.Context, *emptypb.Empty) (*GetNipResponse, error)
	mustEmbedUnimplementedNIPServiceServer()
}

// UnimplementedNIPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNIPServiceServer struct {
}

func (UnimplementedNIPServiceServer) GetItNip(context.Context, *emptypb.Empty) (*GetNipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItNip not implemented")
}
func (UnimplementedNIPServiceServer) GetNurseNip(context.Context, *emptypb.Empty) (*GetNipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNurseNip not implemented")
}
func (UnimplementedNIPServiceServer) mustEmbedUnimplementedNIPServiceServer() {}

// UnsafeNIPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NIPServiceServer will
// result in compilation errors.
type UnsafeNIPServiceServer interface {
	mustEmbedUnimplementedNIPServiceServer()
}

func RegisterNIPServiceServer(s grpc.ServiceRegistrar, srv NIPServiceServer) {
	s.RegisterService(&NIPService_ServiceDesc, srv)
}

func _NIPService_GetItNip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NIPServiceServer).GetItNip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NIPService_GetItNip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NIPServiceServer).GetItNip(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NIPService_GetNurseNip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NIPServiceServer).GetNurseNip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NIPService_GetNurseNip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NIPServiceServer).GetNurseNip(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NIPService_ServiceDesc is the grpc.ServiceDesc for NIPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NIPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NIPService",
	HandlerType: (*NIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItNip",
			Handler:    _NIPService_GetItNip_Handler,
		},
		{
			MethodName: "GetNurseNip",
			Handler:    _NIPService_GetNurseNip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
